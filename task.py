# -*- coding: utf-8 -*-
"""task.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17ZCxF8QQtcqaSWw4HcF7kyHJjVXBn8VD
"""

import json 



# READING JSON FILES AND STORING IT AS LISTS
uniques_today=[]
uniques_yesterday = []

with open('today.json') as f:
  data = json.loads( 
        f.read().replace("}\n{", "},\n{") )

with open('yesterday.json', 'r') as f:
  data1 = json.loads("[" + 
        f.read().replace("}\n{", "},\n{") + 
    "]")


url = set()
url1 = set()

# STORING URL DATA IN LIST FORMAT

## STORING URLH DATAS OF TODAY.JSON

for item in data:
  url.add(item['urlh'])
print("---------------Q.NO - 1----------------------")
print("Count of URLH in today.json:",len(url))

## STORING URLH DATAS OF YESTERDAY.JSON

for item in data1:
  url1.add(item['urlh'])
print("Count of URLH in yesterday.json:",len(url1))

# FETCHING THE UNIQUE URLH COMPARING BOTH THE JSON FILES (Q.NO - 1)

intersection = url.intersection(url1)
print("Count of common urlhs in both files:",len(intersection))


values = set()
values1 = set()

print("----------------- Q.NO - 3------------------------")

# STORING CATEGORY DATA IN LIST FORMAT

## STORING CATEGORY DATAS OF TODAY.JSON
for item in data:
  values.add(item['category'])
print("Count of Category in today.json:",len(values))

## STORING CATEGORY DATAS OF YESTERDAY.JSON

for item in data1:
  values1.add(item['category'])
print("Count of category in yesterday.json:",len(values1))

# FETCHING THE NUMBER OF UNIQUE CATEGORIES COMPARING BOTH THE JSON FILES (Q.NO - 3)

intersection_cate = values.intersection(values1)

print("Count of common category in both files:",len(intersection_cate))

print("-------------Q.NO - 4 --------------------")

# DISPLAYING LIST OF CATEGORIES WHICH IS NOT OVERLAPPING (Q.NO - 4)

## DISPLAYS 'SET()' WHEN THERE IS NO OVERLAPPING

symmetric = ((values^values1)&values1)
print(symmetric)

print("----------------Q.NO - 6----------------")

# FETCHING MRP OF TODAY.JSON AND NORMALIZING THOSE MRP DATAS

mrp=[]
for any in data:
  mrp.append(any['mrp'])

for x in range(len(mrp)):
  if mrp[x] =='0':
    mrp[x] ='NA'


# FETCHING MRP OF YESTERDAY.JSON AND NORMALIZING THOSE MRP DATAS

mrp1=[]
for any in data1:
  mrp1.append(any['mrp'])

for x in range(len(mrp1)):
  if mrp1[x] =='0':
    mrp1[x] ='NA'

# INORDER TO EXPORT DATA INTO A NEW FILE IMPORT LIBRARY CALLED 'xlsxwriter'

import xlsxwriter

# CREATING A FILE NAME AND ALSO SHEET NAME


book = xlsxwriter.Workbook("MRP_OF_2SHEETS.xlsx")

sheet1 = book.add_worksheet("Sheet 1")


# APPENDING DATAS INTO THE FILE AND CLOSING THE FILE

for x in range(min(len(mrp),len(mrp1))):
  if x==0:
    sheet1.write(x,0,"MRP OF TODAY.JSON")
    sheet1.write(x,1,"MRP OF YESTERDAY.JSON")
  else:
    sheet1.write(x,0,mrp[x])
    sheet1.write(x,1,mrp1[x])

print("THE MRP IS NORMALIZED AND THE FILE IS SAVED AS 'XLSX' FILE AND SAVED")

book.close()

print("-----------------------Q.NO - 7------------------------")

# DISPLAYING TITLE AND PRICE OF 10 ITEMS HAVING LEAST PRICE

## DISPLAYING DETAILS OF TODAY.JSON

# INITIALISING DICTIONARY
dict1 = {}

# FETCHING DATA FROM TODAY.JSON AND STORING IN DICT

for any in data:
  dict1.update({any['title']:any['available_price']})
  
# CONVETING NONETYPE TO STRING
for x in dict1: 
  if dict1[x] == None:
    dict1[x] = 'NA'
  dict1[x] = str(dict1[x])

# SORTING THE DICTIONARY
first2pairs = sorted(dict1.items(), key =
             lambda kv:(kv[1], kv[0]))
sorted1 = dict(first2pairs[:10])

print("TITLE AND PRICE FOR TODAY.JSON")

print(list(sorted1.items()))

print("------------------------------------------")

# INITIALISING DICTIONARY

dict2 = {}

# FETCHING DATA FROM YESTERDAY.JSON AND STORING IN DICT

for any in data1:
  dict2.update({any['title']:any['available_price']})
  
# CONVETING NONETYPE TO STRING

for x in dict2: 
  if dict2[x] == None:
    dict2[x] = 'NA'
  dict2[x] = str(dict2[x])

# SORTING THE DICTIONARY

first2pairs1 = sorted(dict2.items(), key =
             lambda kv:(kv[1], kv[0]))
sorted2 = dict(first2pairs1[:10])

print("TITLE AND PRICE FOR YESTERDAY.JSON")

print(list(sorted2.items()))

print("-----------------Q.NO - 8 ---------------------")

# DISPLAYING TOP 5 SUBCATEGORIES HAVING HIGHEST ITEM

# INITIALISING DICTIONARY

dict1 = {}

# FETCHING DATA FROM TODAY.JSON AND STORING IN DICT

for any in data:
  dict1.update({any['subcategory']:any['pack_size']})
  
# CONVETING NONETYPE TO STRING

for x in dict1: 
  if dict1[x] == None:
    dict1[x] = 'NA'
  dict1[x] = str(dict1[x])

# SORTING THE DICTIONARY

first2pairs = sorted(dict1.items(), key =
             lambda kv:(kv[1], kv[0]),reverse=True)
sorted1 = dict(first2pairs[:5])

print("TOP 5 SUBCATEGORIES HAVING HIGHEST ITEM IN TODAY.JSON ")

print(list(sorted1.items()))

print("-----------------------------------------------")
# INITIALISING DICTIONARY

dict4 = {}

# FETCHING DATA FROM TODAY.JSON AND STORING IN DICT

for any in data1:
  dict4.update({any['subcategory']:any['pack_size']})
  
# CONVETING NONETYPE TO STRING

for x in dict4: 
  if dict4[x] == None:
    dict4[x] = 'NA'
  dict4[x] = str(dict4[x])

# SORTING THE DICTIONARY

first2pairs2 = sorted(dict4.items(), key =
             lambda kv:(kv[1], kv[0]),reverse=True)
sorted4 = dict(first2pairs2[:5])

print("TOP 5 SUBCATEGORIES HAVING HIGHEST ITEM IN YESTERDAY.JSON ")

print(list(sorted4.items()))

print("-------------------Q.NO - 9 --------------")

# INITIALIZING A LIST TO STORE HHTP VALUES OF BOTH FILES

llist =[]
for any in data:
  llist.append(any['http_status'])


for any in data1:
  llist.append(any['http_status'])

# INITIALIZSING A DICTIONARY AND PASSING CONDITION 
d6 ={}
keys = {'200'}
for i in set(llist):
  d6[i] = llist.count(i)

# PRINTS OTHER HTTP_STATUS THAN '200'
print("FAILED STATUS")
print({x: d6[x] for x in d6 if x not in keys})